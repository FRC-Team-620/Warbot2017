// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.Warbot2017;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainfrontRight;
    public static SpeedController driveTrainbackRight;
    public static SpeedController driveTrainfrontLeft;
    public static SpeedController driveTrainbackLeft;
    public static RobotDrive driveTrainRobotDrive;
    public static PowerDistributionPanel driveTrainpdp;
    public static SpeedController climberclimbMotor;
    public static SpeedController gearArmarmMotor;
    public static AnalogPotentiometer gearArmpot;
    public static SpeedController ballMechballMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainfrontRight = new Spark(0);
        LiveWindow.addActuator("DriveTrain", "frontRight", (Spark) driveTrainfrontRight);
        
        driveTrainbackRight = new Spark(1);
        LiveWindow.addActuator("DriveTrain", "backRight", (Spark) driveTrainbackRight);
        
        driveTrainfrontLeft = new Spark(2);
        LiveWindow.addActuator("DriveTrain", "frontLeft", (Spark) driveTrainfrontLeft);
        
        driveTrainbackLeft = new Spark(3);
        LiveWindow.addActuator("DriveTrain", "backLeft", (Spark) driveTrainbackLeft);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainfrontRight, driveTrainbackRight,
              driveTrainfrontLeft, driveTrainbackLeft);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainpdp = new PowerDistributionPanel(0);
        LiveWindow.addSensor("DriveTrain", "pdp", driveTrainpdp);
        
        climberclimbMotor = new Spark(4);
        LiveWindow.addActuator("Climber", "climbMotor", (Spark) climberclimbMotor);
        
        gearArmarmMotor = new Spark(5);
        LiveWindow.addActuator("GearArm", "armMotor", (Spark) gearArmarmMotor);
        
        gearArmpot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("GearArm", "pot", gearArmpot);
        
        ballMechballMotor = new Spark(6);
        LiveWindow.addActuator("BallMech", "ballMotor", (Spark) ballMechballMotor);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
