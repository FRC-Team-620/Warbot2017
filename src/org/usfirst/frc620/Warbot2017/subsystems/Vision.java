// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.Warbot2017.subsystems;

import org.usfirst.frc620.Warbot2017.Robot;
import org.usfirst.frc620.Warbot2017.RobotMap;
import org.usfirst.frc620.Warbot2017.commands.*;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.tables.ITable;


/**
 *
 */
public class Vision extends Subsystem implements PIDSource {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay lightSpike = RobotMap.visionlightSpike;
    private ITable dataTable;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private PIDSourceType outputType;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public boolean enable()
    {
    	try {
    		dataTable = NetworkTable.getTable("GRIP").getSubTable("myContoursReport");
    	}
    	catch(Throwable e)
    	{
    		return false;
    	}
    	
    	return dataTable != null;
    }

	@Override
	public void setPIDSourceType(PIDSourceType pidSource)
	{
		outputType = pidSource;
	}

	@Override
	public PIDSourceType getPIDSourceType()
	{
		return outputType;
	}

	@Override
	public double pidGet()
	{
		double[] centers = dataTable.getNumberArray("centerX", new double[]{});
		double[] sizes = dataTable.getNumberArray("area", new double[]{});
		double[] widths = dataTable.getNumberArray("width", new double[]{});
		
		double center;
		
		//TODO Better contour filtering
		
		if(centers.length == 2) //Two detected segments of reflective tape
		{
			center = (centers[0] + centers[1]) / 2;
		}
		else if(centers.length == 3) //If the peg visually "cuts" one of the pieces of tape
		{
			if(sizes.length != 3) //This bit shouldn't ever happen but just in case
			{
				System.err.println("Wrong Number of Sizes");
				return Double.NaN;
			}
			else
			{
				int big = 0;
				for(int i = 0; i < sizes.length; i++) //Figure out which side is being "cut"
					if(sizes[i] > sizes[big])
						big = i;
				
//				System.out.println("zoomp " + Math.abs(centers[(big + 1) % centers.length] - centers[(big + 2) % centers.length])); //Double check that one "piece" is directly over the other
				
				double centerSmall = centers[(big + 1) % centers.length] / 2 + centers[(big + 2) % centers.length] / 2; //Average the x positions of the two segments of the cut piece, which should be almost the same.
//				if(centerSmall < centers[big]) //Print out which side is being cut
//					System.out.print("(left) ");
//				else
//					System.out.print("(right) ");
				
				center = (centers[big] + centerSmall) / 2;
			}
		}
		else //Not detecting the right number of contours for it to be the tape
		{
			System.err.println("Wrong Number of Contours"); //The actual program will know to avoid relying on vision if this happens
			return Double.NaN;
		}
		
		System.out.println(center - 180);
		return center - 180;
	}
}

