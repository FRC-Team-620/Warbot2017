// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.Warbot2017.commands;
import org.usfirst.frc620.Warbot2017.Robot;
import org.usfirst.frc620.Warbot2017.subsystems.ButtonReader;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;

/**
 *
 */
public class DriveWithXbox extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	//UsbCamera test = new UsbCamera("test",0 );
	XboxController xbox;
	DriveDistance driveDist;
	CorrectStrafeDrift correctStrafe;
	Climb climb;
	LowerGearArm lowergeararm;
	RaiseGearArm raisegeararm;
	DepositGear depgear;
	ActuateBallMech ballmech;
	Turn turn;
	double x;
	double y;
	double z;
	double LTrigger;
	int pov;
	boolean Lbumper, camerafront;
	private float startingAngle;
	
	ButtonReader buttonForward = new ButtonReader(1);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithXbox() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        
    }
    protected void initialize() 
    {
		xbox = new XboxController(0);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		//System.out.println("Lidar"+Robot.lidar.getDistance());
		//System.out.println("NavX"+Robot.navX.getYaw());
		LTrigger = xbox.getRawAxis(2);
		Lbumper = xbox.getRawButton(5);
		
		//Robot.climber.climb(xbox.getRawAxis(3));
		if(xbox.getRawButton(6)){
			climb = new Climb(xbox);
			Scheduler.getInstance().add(climb);
		}
		if(xbox.getRawButton(4)){
			//ballmech=new ActuateBallMech(xbox);
			raisegeararm=new RaiseGearArm();
			Scheduler.getInstance().add(raisegeararm);
		}
		if(xbox.getRawButton(3)){
			//depgear=new DepositGear();
			lowergeararm=new LowerGearArm();
			Scheduler.getInstance().add(lowergeararm);
		}
		if(xbox.getRawButton(2)){
			Robot.nextCamera();
		}
		//SWITCHING THE "FRONT"
		buttonForward.update(xbox);
		if(!buttonForward.isOn()){
			if(Robot.getCurrentCam() == 1);
				Robot.switchToCamera(0);
			z/*x if test bot*/ = -xbox.getRawAxis(0);
			y = xbox.getRawAxis(1);
			x/*z if test bot*/ = -xbox.getRawAxis(4);//not negative if test bot
		}
		else{
			if(Robot.getCurrentCam() == 0)
				Robot.switchToCamera(1);
			z/*x if test bot*/ = xbox.getRawAxis(0);
			y = -xbox.getRawAxis(1);
			x/*z if test bot*/ = xbox.getRawAxis(4);//negative if test bot
		}
		
		//CONTROLLER SCALING
		if (!Lbumper) {//LEFT TRIGGER SCALING
			x = (Math.abs(x) < 0.3) ? 0 : x*(1-(LTrigger*.6));// X Dead Zone
			y = (Math.abs(y) < 0.3) ? 0 : y*(1-(LTrigger*.75));// Y Dead Zone
			z = (Math.abs(z) < 0.3) ? 0 : z*(1-(LTrigger*.75));// Z Dead Zone
		} else if (Lbumper) {//L BUMPER SCALING
			x = (Math.abs(x) < 0.3) ? 0 : x * .7;// X Dead Zone and scaling
			y = (Math.abs(y) < 0.3) ? 0 : y * .5;// Y Dead Zone and scaling
			z = (Math.abs(z) < 0.3) ? 0 : z * .5;// Z Dead Zone and scaling
		}
		if(y==0&&z==0){
			correctStrafe=new CorrectStrafeDrift();
			Scheduler.getInstance().add(correctStrafe);
		}
		Robot.driveTrain.mecanumDrive(-x, -y, -z, 0);
		
	}
	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
