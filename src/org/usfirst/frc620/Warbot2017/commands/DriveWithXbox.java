// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc620.Warbot2017.commands;
import org.opencv.core.Mat;
import org.usfirst.frc620.Warbot2017.Robot;
import org.usfirst.frc620.Warbot2017.subsystems.Lidar;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class DriveWithXbox extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	//UsbCamera test = new UsbCamera("test",0 );
	XboxController xbox;
	//Lidar lidar;
	double x;
	double y;
	double z;
	double LTrigger;
	int pov;
	int front;
	boolean Lbumper, camerafront, cameraStream;
	//UsbCamera cameraFront, cameraRear;
	//CvSink Front, Rear;
	//CvSource outputStream;
	//Mat image;
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithXbox() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    protected void initialize() {
		xbox = new XboxController(0);
		front=4;
		//CAMERAS
		/*
		camerafront= true;
		cameraStream= true;
		cameraFront = CameraServer.getInstance().startAutomaticCapture(0);
		cameraFront.setFPS(30);
		cameraFront.setResolution(320, 240);
		cameraRear = CameraServer.getInstance().startAutomaticCapture(1);
		cameraRear.setFPS(30);
		cameraRear.setResolution(320, 240);
		
		//CV SINKS
		Front=new CvSink("Front");
		Rear=new CvSink("Rear");
		Front.setSource(cameraFront);
		Rear.setSource(cameraRear);
	    Front= CameraServer.getInstance().getVideo(cameraFront);
		Rear= CameraServer.getInstance().getVideo(cameraRear);
		Rear.setEnabled(false);
		Front.setEnabled(true);
		
		outputStream = CameraServer.getInstance().putVideo("Switcher", 320, 240);
		image= new Mat();*/
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		LTrigger = xbox.getRawAxis(2);
		Lbumper = xbox.getRawButton(5);
		pov = xbox.getPOV();
		//camerafront= xbox.getRawButton(6)? !camerafront: camerafront;
		//cameraStream= xbox.getRawButton(6)? !cameraStream: cameraStream;
		
		//SWITCHING THE "FRONT"
		if(xbox.getRawButton(4))front=4;//Y
		if(xbox.getRawButton(3))front=3;//X
		if(xbox.getRawButton(2))front=2;//B
		if(xbox.getRawButton(1))front=1;//A
		switch(front){
		case(4)://Normal Front
			x = xbox.getRawAxis(0);
			y = xbox.getRawAxis(1);
			z = xbox.getRawAxis(4);
			break;
		case(3)://Left=Front
			x = xbox.getRawAxis(0);
			y = -xbox.getRawAxis(4);
			z = xbox.getRawAxis(1);
			break;
		case(2)://Right=Front
			x = xbox.getRawAxis(0);
			y = xbox.getRawAxis(4);
			z = -xbox.getRawAxis(1);
			break;
		case(1)://Back=Front
			x = xbox.getRawAxis(0);
			y = -xbox.getRawAxis(1);
			z = -xbox.getRawAxis(4);
			break;
		}
		if(xbox.getRawButton(6)){
				while(Robot.lidar.getDistance()>60){
					System.out.println(Robot.lidar.getDistance());
					Robot.driveTrain.mecanumDrive(0, .25, 0, 0);
				}
		}
		//if(xbox.getRawButton(6)==true)switchImg();`
		//GET VARIABLE CAMERA IMAGE
		/*
		if(cameraStream){
			System.out.println("Front");
			Front.grabFrame(image);
		}
		else if(!cameraStream){
			System.out.println("Rear");
			Rear.grabFrame(image);
		}
		outputStream.putFrame(image);
		*/
		
		//CONTROLLER SCALING
		if (!Lbumper) {//LEFT TRIGGER SCALING
			x = (Math.abs(x) < 0.3) ? 0 : x*(1-(LTrigger*.75));// X Dead Zone
			y = (Math.abs(y) < 0.3) ? 0 : y*(1-(LTrigger*.75));// Y Dead Zone
			z = (Math.abs(z) < 0.3) ? 0 : z*(1-(LTrigger*.6));// Z Dead Zone
		} else if (Lbumper) {//L BUMPER SCALING
			x = (Math.abs(x) < 0.3) ? 0 : x * .5;// X Dead Zone and scaling
			y = (Math.abs(y) < 0.3) ? 0 : y * .5;// Y Dead Zone and scaling
			z = (Math.abs(z) < 0.3) ? 0 : z * .7;// Z Dead Zone and scaling
		}
		Robot.driveTrain.mecanumDrive(-x, -y, -z, 0);
	}
/*
	public void switchImg(){
		Runnable r = new Runnable() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				if(camerafront){
					//cameraRear.setFPS(1);
					
					Rear.setEnabled(false);
					Front.setEnabled(true);
					
					//cameraFront.setFPS(30);
					
					Front.grabFrame(image);
				}
				else if(!camerafront){
					//cameraFront.setFPS(1);
					
					Front.setEnabled(false);
					Rear.setEnabled(true);
					
					//cameraRear.setFPS(30);
					
					Rear.grabFrame(image);
				}
			}
		};
		Thread t = new Thread(r);
		t.start();
	}*/
	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
